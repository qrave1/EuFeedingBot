package telegram

import (
	"fmt"
	"time"

	tele "gopkg.in/telebot.v4"
)

func generateCalendarKeyboard(now time.Time, highlightedDates []time.Time) *tele.ReplyMarkup {
	rm := &tele.ReplyMarkup{}
	rows := make([]tele.Row, 0, 3)

	// TODO: –¥–æ–±–∞–≤–∏—Ç—å –≤–µ–∑–¥–µ –¥–ª—è –ø—É—Å—Ç—ã—Ö Data = "empty" –∏ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ callback handler

	year := now.Year()
	month := now.Month()

	// –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
	prevBtn := tele.Btn{
		Unique: fmt.Sprintf("prev:%d-%02d", year, month),
		Text:   "‚¨Ö",
		Data:   fmt.Sprintf("prev:%d-%02d", year, month),
	}
	titleBtn := tele.Btn{
		Text: fmt.Sprintf("%s %d", month.String(), year),
		Data: "empty",
	}
	nextBtn := tele.Btn{
		Unique: fmt.Sprintf("next:%d-%02d", year, month),
		Text:   "‚û°",
		Data:   fmt.Sprintf("next:%d-%02d", year, month),
	}

	rows = append(rows, rm.Row(prevBtn, titleBtn, nextBtn))

	// –°—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
	days := []string{"–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"}
	dayBtns := make([]tele.Btn, 0, 7)
	for _, day := range days {
		dayBtns = append(
			dayBtns,
			tele.Btn{
				Text: day,
				Data: fmt.Sprintf("day:%s", day),
			},
		)
	}
	rows = append(rows, rm.Row(dayBtns...))

	// –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
	firstDay := time.Date(year, month, 1, 0, 0, 0, 0, time.UTC)
	startWeekday := int(firstDay.Weekday())
	// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
	lastDay := time.Date(year, month+1, 0, 0, 0, 0, 0, time.UTC).Day()

	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–∞—Ç
	var buttons []tele.Btn
	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
	for i := 0; i < startWeekday; i++ {
		buttons = append(buttons, tele.Btn{Data: "empty", Text: " "})
	}
	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–∞—Ç
	for day := 1; day <= lastDay; day++ {
		text := fmt.Sprintf("%d", day)
		// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º–æ–π
		for _, hl := range highlightedDates {
			if hl.Year() == year && hl.Month() == month && hl.Day() == day {
				text += " üòã"
				break
			}
		}
		callback := fmt.Sprintf("date:%d-%02d-%02d", year, month, day)
		btn := tele.Btn{
			Unique: callback,
			Text:   text,
			Data:   callback,
		}
		buttons = append(buttons, btn)
	}
	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–µ—á–Ω—ã—Ö –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
	totalButtons := len(buttons)
	placeholdersNeeded := (7 - totalButtons%7) % 7
	for i := 0; i < placeholdersNeeded; i++ {
		buttons = append(buttons, tele.Btn{Data: "empty", Text: " "})
	}
	// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–∏
	for i := 0; i < len(buttons); i += 7 {
		end := i + 7

		if end > len(buttons) {
			end = len(buttons)
		}

		row := buttons[i:end]

		rows = append(rows, rm.Row(row...))
	}

	rm.Inline(rows...)

	return rm
}
